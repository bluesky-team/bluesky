import os, glob, sys

def Glob (includes = Split ("."), excludes = None) :
    file_list = []
    for p in includes :
        file_list.extend (glob.glob (os.path.join (p, "*.cpp")))

    if (not excludes is None) :
        for f in excludes :
            try: 
                file_list.remove (f)
            except :
                print (sys.exc_info ())
                continue

    file_list.sort ()
    return file_list

# for right compilation following environment variables should be set
# .bashrc
#BLUESKY_PATH=/home/zerg/bs
#BS_PLUGIN_LIBS=/home/zerg/bs/exe/debug/plugins
#BS_LOAD_CFGS=$BLUESKY_PATH
#LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/zerg/bs/exe/debug:/home/zerg/bs/exe/debug/plugins
#PATH=$PATH:$LD_LIBRARY_PATH
#PYTHONPATH=$PYTHONPATH:/home/zerg/bs/exe/debug:/home/zerg/bs/exe/debug/plugins
#
#export BLUESKY_PATH
#export BS_PLUGIN_LIBS
#export BS_LOAD_CFGS
#export LD_LIBRARY_PATH
#export PATH
#export PYTHONPATH

env = Environment(ENV = os.environ)#, tools=["default", "gch"], toolpath=".")
bs = os.environ["BLUESKY_PATH"]
bs_plugins = os.environ ["BS_PLUGIN_LIBS"]
bs_load_cfgs = os.environ ["BS_LOAD_CFGS"]
#bs should be like ~/bs
#bs_plugins should be like ~/bs/exe/<debug|release>/plugins
bs_path = [os.path.join (bs, "kernel", "src"), os.path.join (bs, "kernel", "src", "python")]
bs_path.append (os.path.join ("/usr", "include", "python2.5"))
bos_path = []
bos_path.extend (bs_path)
bos_path.append (os.path.join (bs, "plugins", "bs_bos_core", "src"))

bs_flags        = "-ggdb3 -D_DEBUG -DUNIX -DBS_EXPORTING -DBS_EXPORTING_PLUGIN -DBSPY_EXPORTING_PLUGIN -W -Wall -fvisibility=hidden -fvisibility-inlines-hidden"
bs_loader_flags = "-ggdb3 -D_DEBUG -DUNIX -DBS_EXPORTING_PLUGIN -W -Wall -fvisibility=hidden -fvisibility-inlines-hidden"
bos_flags       = "-ggdb3 -D_DEBUG -DBS_EXPORTING_PLUGIN -DBSPY_EXPORTING_PLUGIN -DUNIX -fvisibility=hidden -fvisibility-inlines-hidden -W -Wall -Wno-deprecated"


shared_libs     = ["boost_thread-mt", "libboost_python-mt", "libboost_signals-mt", "libboost_filesystem-mt", "libboost_regex-mt", "libconfig", "libpython2.5", "libconfig++", "libboost_date_time-mt"]
bs_libs         = []
bos_libs        = ["blue_sky"]
bs_libs.extend (shared_libs)
bos_libs.extend (shared_libs)

bs_kernel_root  = os.path.join (bs, "kernel", "src")
bs_loader_root  = os.path.join (bs, "python", "bspy_loader", "src")
bos_core_root   = os.path.join (bs, "plugins", "bs_bos_core", "src")

bs_files        = Glob ([bs_kernel_root, os.path.join (bs_kernel_root, "python")])
bs_loader_files = Glob ([os.path.join (bs_loader_root)])
#bos_files       = Glob ([bos_core_root], [os.path.join (bos_core_root, "property_base_new.cpp"), os.path.join (bos_core_root, "stdafx.cpp")])
#bos_pch         = os.path.join (bos_core_root, "stdafx")

blue_sky_so     = SharedLibrary ("blue_sky", bs_files, LIBS=bs_libs, LIBPATH=["/usr/lib"], CPPPATH=bs_path, CC="gcc", CCFLAGS=bs_flags)
bs_loader_so    = SharedLibrary ("bs", bs_loader_files, LIBS=bos_libs, LIBPATH=[".", "/usr/lib"], CPPPATH = bos_path, CC = "gcc", CCFLAGS=bs_loader_flags)
#bs_bos_core_so  = SharedLibrary ("bs_bos_core", bos_files, LIBS=bos_libs, LIBPATH=[".", "/usr/lib"], CPPPATH = bos_path, CC="gcc", CCFLAGS=bos_flags)

InstallAs ([os.path.join (bs, "exe", "debug", str (blue_sky_so[0])), os.path.join (bs, "exe", "debug", "bs.so")],
        [blue_sky_so, bs_loader_so])
Alias ("install", os.path.join (bs, "exe", "debug")) 

#Command (str (blue_sky_so[0]), os.path.join (bs, "debug", str (blue_sky_so[0])), Copy ("$TARGET", "$SOURCE"))
#Command (str (bs_loader_so[0]), os.path.join (bs, "debug", str (bs_loader_so[0])), Copy ("$TARGET", "$SOURCE"))
#Command (str (bs_bos_core_so[0]), os.path.join (bs_plugins, str (bs_bos_core_so[0])), Copy ("$TARGET", "$SOURCE"))













#bos_pch1 = env.Object ("bos_pch", bos_pch + ".cpp", LIBS=bos_libs, LIBPATH=[".", "/usr/lib"], CPPPATH = bos_path, CC="gcc", CCFLAGS=bos_flags + " -x c++")
#print (gch)
#gch = env.Gch(bos_pch + ".gch", bos_pch)
#print (gch)
#env.Depends (bs_bos_core, str (gch[0]))
#bos_files       = [os.path.join (bos_core_root, "main.cpp")]

