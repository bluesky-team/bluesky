import os, os.path;

# define helper functions
def list_prefix(in_list, what) :
	return [what + x for x in in_list];

def list_suffix(in_list, what) :
	return [x + what for x in in_list];

# setup list of source files to compile
kernel_cpp_list = Split("""
	bs_abstract_storage.cpp
	bs_array.cpp
	bs_assert.cpp
	bs_command.cpp
	bs_common.cpp
	bs_conf_reader.cpp
	bs_config_parser.cpp
	bs_exception.cpp
	bs_kernel.cpp
	bs_kernel_ston.cpp
	bs_link.cpp
	bs_messaging.cpp
	bs_misc.cpp
	bs_object_base.cpp
	bs_prop_base.cpp
	bs_report.cpp
	bs_shell.cpp
	bs_tree.cpp
	bs_type_info.cpp
	main.cpp
	smart_ptr.cpp
	thread_pool.cpp
""");

py_kernel_cpp_list = [os.path.join('python', x) for x in Split("""
	bs_import_common.cpp
	bs_python_import.cpp
	py_bs_abstract_storage.cpp
	py_bs_assert.cpp
	py_bs_command.cpp
	py_bs_kernel.cpp
	py_bs_link.cpp
	py_bs_log.cpp
	py_bs_messaging.cpp
	py_bs_object_base.cpp
	py_bs_shell.cpp
	py_bs_tree.cpp
	py_bs_typed.cpp	
""")];

#full_kernel_cpp_list = kernel_cpp_list + py_kernel_cpp_list;

# import custom settings & custom variables
Import('*');

lib_name = 'blue_sky';
tar_name = 'kernel';

# add variable to decide whether to build with python support
if 'py' not in custom_vars.keys() :
	custom_vars.Add('py', 'Set to 1 to build with Python support', '0');
	custom_vars.Update(custom_env);
	# export changes -- seems that this step isn't needed (?)
	#Export('custom_vars', 'custom_env');

# setup default build environment
base_env = custom_env.Clone();
base_env.Append(
	CPPDEFINES = ['BS_EXPORTING', 'BS_EXPORTING_PLUGIN'],
	CPPPATH = ['include', 'src'],
	LIBS = ['loki', '${python_name}']
);
if base_env['platform'].startswith('lin') :
	base_env.Append(LIBS = ['dl']);

# define boost lib names to include
boost_libs = list_suffix(list_prefix(['filesystem', 'regex', 'thread', 'signals', 'python'], 'boost_'), '-mt');
boost_libs_dbg = list_suffix(boost_libs, '-d');

# are we building with python support?
if base_env['py'] == '1' :
	base_env.Append(CPPDEFINES = ['BSPY_EXPORTING'], CPPPATH = ['include/python']);
	kernel_cpp_list += py_kernel_cpp_list;

# finalize env construction
if build_kind == 'debug' :
	if base_env['platform'].startswith('lin') :
		base_env.Append(LIBS = boost_libs_dbg);
	lib_name += '_d';
elif build_kind == 'release' and base_env['platform'].startswith('lin') :
	base_env.Append(LIBS = boost_libs);

# actaully build target
bs_kernel = base_env.SharedLibrary(target = os.path.join(tar_exe_dir, lib_name), source = [os.path.join('src', x) for x in kernel_cpp_list]);
Alias(tar_name, bs_kernel);
Export('bs_kernel');

# Install step
if base_env['install'] == '1':
	inst_tar = base_env.Install('$prefix', bs_kernel);
	Alias(tar_name, inst_tar);

