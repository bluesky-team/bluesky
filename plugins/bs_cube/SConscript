import os, os.path;

# fiilelist
cpp_list = Split("""
	bs_cube.cpp
	bs_cube_t.cpp
	main.cpp
""");

# directories
lib_name = 'bs_cube';
tar_name = lib_name;

# import custom settings
Import('*');

# construct base environ
base_env = custom_env.Clone();
base_env.AppendUnique(
	CPPDEFINES = ['BS_EXPORTING_PLUGIN'],
	CPPPATH = ['src', '#kernel/include']
);

# check if we are building with python support
if base_env['py'] == '1' :
	base_env.Append(
			CPPDEFINES = ['BSPY_EXPORTING_PLUGIN'],
			CPPPATH = ['#kernel/include/python']
	);

# construct debug and release env
if build_kind == 'debug' :
#	base_env.AppendUnique(
#			LIBS = ['blue_sky_d']);
	lib_name += '_d';
#else :
#	base_env.AppendUnique(
#			LIBS = ['blue_sky']);

# actually build target
bs_cube = base_env.SharedLibrary(target = os.path.join(tar_exe_plugin_dir, lib_name), source = [os.path.join('src', x) for x in cpp_list]);
# specify dependencies or ignore them
if base_env['nodeps'] == '1' :
	Ignore(bs_cube, bs_kernel);
else :
	Depends(bs_cube, bs_kernel);

#	bs_cube_debug = debug_env.Install(exe_dir_dbg, debug);
base_env.Alias(tar_name, bs_cube);
Export('bs_cube');

# 	Install step
if base_env['install'] == '1':
	inst_tar = base_env.Install('$plugins_prefix', bs_cube);
	Alias(tar_name, inst_tar);

