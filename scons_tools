import os, sys, glob

def list_suffix (list, suffix) :
	return [x + suffix for x in list];

def list_prefix(in_list, what) :
    return [what + x for x in in_list];

def add_suffix (x, suffix) :
    if (len (x) == 0) :
        return x
    else :
        return x + suffix

class files :
    def __init__ (self, root = ["."], excludes = [], ext = ["*.cpp"]) :
        def super_glob (inc = Split ("."), excludes = []) :
            file_list = []
            for e in ext :
        	for p in inc :
            	    file_list.extend ([str (x) for x in Glob (os.path.join (p, e))])

            for f in excludes :
                if (f in file_list) :
                    file_list.remove (f)

            file_list.sort ()
            return file_list

        self.root = ""
        for p in root :
            if (p <> ".") :
                self.root = os.path.join (self.root, p)

        sources = super_glob ([os.path.join (self.root, "src")], [str (Glob (os.path.join (self.root, "src", ex))[0]) for ex in excludes])

        self.sources = [os.path.join ("src", os.path.split (x)[1]) for x in sources]

def bs_common_defines(custom_env) :
	custom_env.AppendUnique(CPPDEFINES = ["BS_EXPORTING_PLUGIN"]);
	if custom_env['py'] == '1' :
		custom_env.AppendUnique(CPPDEFINES = ["BSPY_EXPORTING_PLUGIN"]);

Export ("list_prefix")
Export ("list_suffix")
Export ("add_suffix")
Export ("files")
Export ("bs_common_defines")

